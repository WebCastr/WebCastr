using WebCaster.API.Models;
using static System.Net.Mime.MediaTypeNames;

namespace WebCaster.API.Services.Liquidsoap;

public class LIQScriptWriter
{
    private readonly Station _station;
    private StreamWriter _scriptFileStream = StreamWriter.Null;

    public LIQScriptWriter(Station station)
    {
        _station = station;
    }

    public void WriteScript()
    {
        using (_scriptFileStream = new StreamWriter(Path.Combine(_station.BaseDir, "liquidsoap", "liquidsoap.liq")))
        {
            WriteHeader();

            WriteAudioProcessing();

            WriteFooter();
        }
    }

    private void WriteHeader()
    {
        string pidFile = Path.Combine(_station.BaseDir, "liquidsoap", "liquidsoap.pid");

        _scriptFileStream.WriteLine($"""
         # CAUTION: This file is automatically generated by WebCaster
         # Please do not edit
         #
         # Station : #{_station.Id} {_station.Name} ({_station.Url})
         # Platform: {System.Runtime.InteropServices.RuntimeInformation.RuntimeIdentifier}
         #
         
         init.daemon.set(false)
         init.daemon.pidfile.path.set("{pidFile}")

         settings.server.log.level.set(4)

         environment.set("TZ", "{_station.TimeZone}")

         station_base_dir = "{_station.BaseDir}"
         station_id = "{_station.Id}"
         station_name = "{_station.Name}"
         station_short_name = "{_station.ShortName}"
         station_url = "{_station.Url}"

         """);
    }

    private void WriteAudioProcessing()
    {
        WriteSectionHeader("Normalization & compression");
        _scriptFileStream.WriteLine($"# Method: {_station.AudioProcessingMethod}");

        switch (_station.AudioProcessingMethod)
        {
            case 0:
                break;
            case Enums.AudioProcessingMethods.Liquidsoap:
                _scriptFileStream.WriteLine($"""
                radio = normalize(target = 0., window = 0.03, gain_min = -16., gain_max = 0., radio)
                radio = compress.exponential(radio, mu = 1.0)
                """);
                break;
            default:
                throw new NotImplementedException("Unsupported audio processing method: " + _station.AudioProcessingMethod);
        }

        _scriptFileStream.WriteLine("");
    }

    private void WriteFooter()
    {
        _scriptFileStream.WriteLine("""
        #
        # End of file
        """);
    }

    private void WriteSectionHeader(string header)
    {
        _scriptFileStream.WriteLine($"""
        # {header}
        # {string.Concat(System.Linq.Enumerable.Repeat("=", header.Length))}

        """);
    }
}
